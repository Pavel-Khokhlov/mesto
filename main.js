!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="http://pavel-khokhlov.github.io/mesto",n(n.s=1)}([function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0);var r=document.querySelector(".profile__edit-btn"),o=document.querySelector(".profile__name"),i=document.querySelector(".profile__job"),u=document.querySelector(".popup__input_name-profile"),a=document.querySelector(".popup__input_job-profile"),c=document.querySelector(".profile__avatar-btn"),s=document.querySelector(".profile__avatar"),l=document.querySelector(".popup__input_avatar-link"),f=document.querySelector(".profile__add-btn"),p=document.querySelector(".popup__input_name-place"),h=document.querySelector(".popup__input_link-place"),_=document.querySelector(".popup__input");document.querySelector(".popup-zoom"),document.querySelector(".popup_edit-profile"),document.querySelector(".popup_edit-avatar");function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t,n,r,i,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._likes=t.likes,this._cardId=t._id,this._userId=o.id,this._ownerId=t.owner._id,this._selector=n,this._handleCardClick=r,this._handleLikeClick=i,this._handleDelClick=u}var t,n,r;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._selector).content.querySelector(".place").cloneNode(!0)}},{key:"_handleLiked",value:function(){this._handleLikeClick(this)}},{key:"toggleLike",value:function(e){this._likeButton.classList.toggle("place__like-btn_active"),this._likeCount.textContent=e.likes.length,this._likes=e.likes}},{key:"isLiked",value:function(){return!!this._likes.find((function(e){return e._id===o.id}))}},{key:"_handleZoomImage",value:function(e,t){this._handleCardClick(e,t)}},{key:"_handleDelete",value:function(e,t){this._handleDelClick(e,t)}},{key:"_setEventsListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){return e._handleLiked()})),this._delButton.addEventListener("click",(function(){return e._handleDelete(e._element,e._cardId)})),this._image.addEventListener("click",(function(){return e._handleZoomImage(e._name,e._link)}))}},{key:"generatePlace",value:function(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".place__like-btn"),this._delButton=this._element.querySelector(".place__del-btn"),this._image=this._element.querySelector(".place__image"),this._image.src=this._link,this._image.alt=this._name,this._element.querySelector(".place__title").textContent=this._name,this._likeCount=this._element.querySelector(".place__like-count"),this._likeCount.textContent=this._likes.length,this._ownerId===this._userId?this._delButton.classList.remove("place__del-btn_disable"):this._delButton.classList.add("place__del-btn_disable"),this.isLiked()?this._likeButton.classList.add("place__like-btn_active"):this._likeButton.classList.remove("place__like-btn_active"),this._setEventsListeners(),this._element}}])&&d(t.prototype,n),r&&d(t,r),e}();function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n,r;return t=e,(n=[{key:"renderPlaces",value:function(e){var t=this;e.forEach((function(e){return t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.append(e)}},{key:"newItem",value:function(e){this._container.prepend(e)}}])&&v(t.prototype,n),r&&v(t,r),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t){var n=t.nameUser,r=t.aboutUser;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._about=r,this._avatar=s}var t,n,r;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about}},{key:"setUserAvatar",value:function(e){this._avatar.src=e.avatar,this._avatar.alt=e.name}}])&&b(t.prototype,n),r&&b(t,r),e}();function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._root=document.querySelector(".root"),this._popupForm=document.querySelector(t),this._popup=this._popupForm.closest(".popup"),this._submitBtn=this._popupForm.querySelector(".popup__save-btn"),this.close=this.close.bind(this),this._overlayElement=null,this.handleEscClose=this.handleEscClose.bind(this)}var t,n,r;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),this._root.classList.add("root_scroll-disabled"),document.addEventListener("keydown",this.handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),this._root.classList.remove("root_scroll-disabled"),document.removeEventListener("keydown",this.handleEscClose)}},{key:"handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleOverlayClose",value:function(e){e.target===e.currentTarget&&this.close()}},{key:"setEventListeners",value:function(){this._popup.querySelector(".popup__close-btn").addEventListener("click",this.close),this._overlayElement=this._popup,this._overlayElement.addEventListener("click",this._handleOverlayClose.bind(this))}}])&&g(t.prototype,n),r&&g(t,r),e}();function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t,n){return(O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function L(e,t){return(L=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function P(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return C(this,n)}}function C(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&L(e,t)}(i,e);var t,n,r,o=P(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e))._zoomPopupElement=document.querySelector(e),t._zoomImage=t._zoomPopupElement.querySelector(".popup-zoom__image"),t._zoomCapture=t._zoomPopupElement.querySelector(".popup-zoom__caption"),t}return t=i,(n=[{key:"open",value:function(e,t){this._zoomImage.src=t,this._zoomImage.alt=e,this._zoomCapture.textContent=e,O(j(i.prototype),"open",this).call(this)}},{key:"setEventListeners",value:function(){O(j(i.prototype),"setEventListeners",this).call(this)}}])&&w(t.prototype,n),r&&w(t,r),i}(S);function B(e){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return(x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=U(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=U(e);if(t){var o=U(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return A(this,n)}}function A(e,t){return!t||"object"!==B(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(i,e);var t,n,r,o=R(i);function i(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,n))._handleFormSubmit=r,t._inputList=t._popupForm.querySelectorAll(".popup__input"),t._nameInput=u,t._jobInput=a,t}return t=i,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setInputValues",value:function(e){var t=e.name,n=e.about;this._nameInput.value=t,this._jobInput.value=n}},{key:"changeBtnText",value:function(){this._submitBtn.textContent="Сохранение..."}},{key:"close",value:function(){x(U(i.prototype),"close",this).call(this),this._popupForm.reset(),this._submitBtn.textContent="Сохранить"}},{key:"setEventListeners",value:function(){var e=this;x(U(i.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(){e._handleFormSubmit(e._getInputValues())}))}}])&&q(t.prototype,n),r&&q(t,r),i}(S);function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t,n){return(F="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=J(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function H(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=J(e);if(t){var o=J(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function J(e){return(J=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(i,e);var t,n,r,o=H(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"changeConfirmHandler",value:function(e){this._handleSubmitYes=e}},{key:"changeBtnText",value:function(){this._submitBtn.textContent="Удаление..."}},{key:"close",value:function(){F(J(i.prototype),"close",this).call(this),this._submitBtn.textContent="Да"}},{key:"setEventListeners",value:function(){var e=this;F(J(i.prototype),"setEventListeners",this).call(this),this._submitBtn.addEventListener("click",(function(){return e._handleSubmitYes(e._cardId)}))}}])&&V(t.prototype,n),r&&V(t,r),i}(S);function Z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var $=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=t,this._formElement=document.querySelector(t),this._inputElement=_,this._inputSelector=".popup__input",this._submitButton=".popup__save-btn",this._activeErrorClass="popup__input-error_active",this._inputInvalidClass="popup__input_invalid",this._inactiveButtonClass="popup__save-btn_inactive",this._inputArray=this._formElement.querySelectorAll(this._inputSelector),this._submitBtn=this._formElement.querySelector(this._submitButton)}var t,n,r;return t=e,(n=[{key:"resetErrorState",value:function(){var e=this;this._inputArray.forEach((function(t){e._hideInputError(t),e._inactiveButton()}))}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector("#".concat(e.id,"-error"));n.textContent=t,n.classList.add(this._activeErrorClass),e.classList.add(this._inputInvalidClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._activeErrorClass),e.classList.remove(this._inputInvalidClass)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_inactiveButton",value:function(){this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.setAttribute("disabled",!0)}},{key:"_activeButton",value:function(){this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.removeAttribute("disabled")}},{key:"_toggleButtonState",value:function(e){this._hasInvalidInput(e)?this._inactiveButton():this._activeButton()}},{key:"_checkInputValidity",value:function(e){if(e.validity.valid)this._hideInputError(e);else{var t=e.validationMessage;this._showInputError(e,t)}}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._inputSelector));t.forEach((function(n){n.addEventListener("input",(function(){e._checkInputValidity(n),e._toggleButtonState(t)}))})),this._toggleButtonState(t)}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){return e.preventDefault()})),this._setEventListeners()}}])&&Z(t.prototype,n),r&&Z(t,r),e}();function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var K=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t.url,this.headers=t.headers}var t,n,r;return t=e,(n=[{key:"getPlaces",value:function(){return fetch("".concat(this.url,"/cards"),{headers:this.headers}).then(this._checkPromise)}},{key:"newPlace",value:function(){return fetch("".concat(this.url,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify({name:p.value,link:h.value})}).then(this._checkPromise)}},{key:"getUserInfo",value:function(){return fetch("".concat(this.url,"/users/me"),{headers:this.headers}).then(this._checkPromise)}},{key:"patchUserInfo",value:function(){return fetch("".concat(this.url,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:u.value,about:a.value})}).then(this._checkPromise)}},{key:"patchUserAvatar",value:function(){return fetch("".concat(this.url,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:l.value})}).then(this._checkPromise)}},{key:"addLike",value:function(e){return fetch("".concat(this.url,"/cards/likes/").concat(e),{method:"PUT",headers:this.headers}).then(this._checkPromise)}},{key:"removeLike",value:function(e){return fetch("".concat(this.url,"/cards/likes/").concat(e),{method:"DELETE",headers:this.headers}).then(this._checkPromise)}},{key:"deleteCard",value:function(e){return fetch("".concat(this.url,"/cards/").concat(e),{method:"DELETE",headers:this.headers}).then(this._checkPromise)}},{key:"_checkPromise",value:function(e){return e.ok||Promise.reject("Error ".concat(e.status)),e.json()}}])&&G(t.prototype,n),r&&G(t,r),e}();function Q(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return W(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var X=function(e){alert("Всё идёт не по плану. ".concat(e.status))},ee=new I(".popup-zoom");ee.setEventListeners();var te=function(e,t){ee.open(e,t)},ne=new $(".popup_edit-profile");ne.enableValidation();var re=new $(".popup_edit-avatar");re.enableValidation();var oe=new $(".popup_add-place");oe.enableValidation();var ie=new K({url:"https://mesto.nomoreparties.co/v1/cohort-18",headers:{"Content-Type":"application/json",authorization:"87b27e82-ce10-439c-bbe6-2acce8f72cdc"}}),ue=function(e){var t=e._cardId;e.isLiked()?ie.removeLike(t).then((function(t){e.toggleLike(t)})).catch(X):ie.addLike(t).then((function(t){e.toggleLike(t)})).catch(X)};Promise.all([ie.getUserInfo(),ie.getPlaces()]).then((function(e){var t=Q(e,2),n=t[0],r=t[1];fe.setUserInfo(n),fe.setUserAvatar(n),o.id=n._id;var i=r.map((function(e){return{name:e.name,link:e.link,owner:e.owner,_id:e._id,likes:e.likes}}));ae.renderPlaces(i)})).catch(X);var ae=new m({renderer:function(e){!function(e){var t=new y(e,".place-template",te,ue,le).generatePlace();ae.addItem(t)}(e)}},".places"),ce=new D({popupSelector:".popup_add-place",handleFormSubmit:function(){ce.changeBtnText(),ie.newPlace().then((function(e){var t=new y(e,".place-template",te,ue,le).generatePlace();ae.newItem(t)})).then((function(){ce.close()})).catch(X)}});ce.setEventListeners(),f.addEventListener("click",(function(){oe.resetErrorState(),ce.open()}));var se=new Y(".popup_del-place");se.setEventListeners();var le=function(e,t){var n=e,r=t;se.open(),se.changeConfirmHandler((function(){se.changeBtnText(),ie.deleteCard(r).then((function(e){return e})).then((function(){n.remove()})).then((function(){se.close()})).catch(X)}))},fe=new k({nameUser:o,aboutUser:i}),pe=new D({popupSelector:".popup_edit-profile",handleFormSubmit:function(){pe.changeBtnText(),ie.patchUserInfo().then((function(e){fe.setUserInfo(e)})).then((function(){pe.close()})).catch(X)}});pe.setEventListeners(),r.addEventListener("click",(function(){ne.resetErrorState(),pe.setInputValues(fe.getUserInfo()),pe.open()}));var he=new D({popupSelector:".popup_edit-avatar",handleFormSubmit:function(){he.changeBtnText(),ie.patchUserAvatar().then((function(e){fe.setUserAvatar(e)})).then((function(){he.close()})).catch(X)}});he.setEventListeners(),c.addEventListener("click",(function(){re.resetErrorState(),he.open()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcG9wdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wb3B1cFdpdGhDb25maXJtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImJ1dHRvbkVkaXRQcm9maWxlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmFtZVByb2ZpbGUiLCJqb2JQcm9maWxlIiwibmFtZUlucHV0Iiwiam9iSW5wdXQiLCJidXR0b25BdmF0YXIiLCJ1c2VyQXZhdGFyIiwiYXZhdGFyTGlua0lucHV0IiwiYnV0dG9uQWRkUGxhY2UiLCJpbnB1dE5hbWVQbGFjZSIsImlucHV0TGlua1BsYWNlIiwiaW5wdXRFbGVtZW50IiwiQ2FyZCIsImNhcmQiLCJzZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsImhhbmRsZUxpa2VDbGljayIsImhhbmRsZURlbENsaWNrIiwidGhpcyIsIl9uYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2xpa2VzIiwibGlrZXMiLCJfY2FyZElkIiwiX2lkIiwiX3VzZXJJZCIsImlkIiwiX293bmVySWQiLCJvd25lciIsIl9zZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlTGlrZUNsaWNrIiwiX2hhbmRsZURlbENsaWNrIiwiY29udGVudCIsImNsb25lTm9kZSIsInJlcyIsIl9saWtlQnV0dG9uIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiX2xpa2VDb3VudCIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiZmluZCIsImVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRsZUxpa2VkIiwiX2RlbEJ1dHRvbiIsIl9oYW5kbGVEZWxldGUiLCJfZWxlbWVudCIsIl9pbWFnZSIsIl9oYW5kbGVab29tSW1hZ2UiLCJfZ2V0VGVtcGxhdGUiLCJzcmMiLCJhbHQiLCJyZW1vdmUiLCJhZGQiLCJpc0xpa2VkIiwiX3NldEV2ZW50c0xpc3RlbmVycyIsIlNlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImNhcmRzQXJyIiwiZm9yRWFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJVc2VySW5mbyIsIm5hbWVVc2VyIiwiYWJvdXRVc2VyIiwiX2Fib3V0IiwiX2F2YXRhciIsImFib3V0IiwiYXZhdGFyIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3Jvb3QiLCJfcG9wdXBGb3JtIiwiX3BvcHVwIiwiY2xvc2VzdCIsIl9zdWJtaXRCdG4iLCJjbG9zZSIsIl9vdmVybGF5RWxlbWVudCIsImhhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiX2hhbmRsZU92ZXJsYXlDbG9zZSIsIlBvcHVwV2l0aEltYWdlIiwiX3pvb21Qb3B1cEVsZW1lbnQiLCJfem9vbUltYWdlIiwiX3pvb21DYXB0dXJlIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9pbnB1dExpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX25hbWVJbnB1dCIsIl9qb2JJbnB1dCIsIl9mb3JtVmFsdWVzIiwiaW5wdXQiLCJyZXNldCIsIl9nZXRJbnB1dFZhbHVlcyIsIlBvcHVwV2l0aENvbmZpcm0iLCJoYW5kbGVyIiwiX2hhbmRsZVN1Ym1pdFllcyIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtU2VsZWN0b3IiLCJfZm9ybVNlbGVjdG9yIiwiX2Zvcm1FbGVtZW50IiwiX2lucHV0RWxlbWVudCIsIl9pbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvbiIsIl9hY3RpdmVFcnJvckNsYXNzIiwiX2lucHV0SW52YWxpZENsYXNzIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRBcnJheSIsIl9oaWRlSW5wdXRFcnJvciIsIl9pbmFjdGl2ZUJ1dHRvbiIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlucHV0TGlzdCIsInNvbWUiLCJ2YWxpZGl0eSIsInZhbGlkIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiX2hhc0ludmFsaWRJbnB1dCIsIl9hY3RpdmVCdXR0b24iLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9zaG93SW5wdXRFcnJvciIsIkFycmF5IiwiZnJvbSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJwcmV2ZW50RGVmYXVsdCIsIl9zZXRFdmVudExpc3RlbmVycyIsIkFwaSIsImNvbmZpZyIsInVybCIsImhlYWRlcnMiLCJmZXRjaCIsInRoZW4iLCJfY2hlY2tQcm9taXNlIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYXJkSWQiLCJvayIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJqc29uIiwiY2F0Y2hFcnIiLCJhbGVydCIsInpvb21Qb3B1cCIsInNldEV2ZW50TGlzdGVuZXJzIiwib3Blblpvb21Qb3B1cCIsIm9wZW4iLCJmb3JtUHJvZmlsZVZhbGlkYXRvciIsImVuYWJsZVZhbGlkYXRpb24iLCJmb3JtQXZhdGFyVmFsaWRhdG9yIiwiZm9ybVBsYWNlVmFsaWRhdG9yIiwiYXBpIiwiYXV0aG9yaXphdGlvbiIsInJlbW92ZUxpa2UiLCJ0b2dnbGVMaWtlIiwiYWRkTGlrZSIsImFsbCIsImdldFVzZXJJbmZvIiwiZ2V0UGxhY2VzIiwidXNlclJlcyIsImNhcmRSZXMiLCJ1c2VyUHJvZmlsZSIsInNldFVzZXJJbmZvIiwic2V0VXNlckF2YXRhciIsIm1hcCIsInNlcnZlclBsYWNlTGlzdCIsInJlbmRlclBsYWNlcyIsInBsYWNlRWxlbWVudCIsImdlbmVyYXRlUGxhY2UiLCJhZGRJdGVtIiwiY3JlYXRlQ2FyZCIsIm5ld1BsYWNlRm9ybSIsImNoYW5nZUJ0blRleHQiLCJuZXdQbGFjZSIsIm5ld0l0ZW0iLCJyZXNldEVycm9yU3RhdGUiLCJjb25maXJtRGVsUGxhY2UiLCJjaGFuZ2VDb25maXJtSGFuZGxlciIsImRlbGV0ZUNhcmQiLCJlZGl0UHJvZmlsZUZvcm0iLCJwYXRjaFVzZXJJbmZvIiwic2V0SW5wdXRWYWx1ZXMiLCJ1cGRhdGVBdmF0YXIiLCJwYXRjaFVzZXJBdmF0YXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVB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LG9CQUVoQmpLLEVBQWtCK0MsaUJBQWlCLFNBQVMsV0FDMUNxSCxHQUFxQjRCLGtCQUNyQkksR0FBZ0JFLGVBQWVwQixHQUFZSixlQUMzQ3NCLEdBQWdCakMsVUFJbEIsSUFBTW9DLEdBQWUsSUFBSXZHLEVBQWMsQ0FDckNsQixjVnhKd0IscUJVeUp4Qm1CLGlCQUFrQixXQUNoQnNHLEdBQWFWLGdCQUNickIsR0FDR2dDLGtCQUNBdEQsTUFBSyxTQUFDNUcsR0FDTDRJLEdBQVlFLGNBQWM5SSxNQUUzQjRHLE1BQUssV0FDSnFELEdBQWFuSCxXQU5qQixNQVFTMEUsTUFHYnlDLEdBQWF0QyxvQkFFYjFKLEVBQWF3QyxpQkFBaUIsU0FBUyxXQUNyQ3VILEdBQW9CMEIsa0JBQ3BCTyxHQUFhcEMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiaHR0cDovL3BhdmVsLWtob2tobG92LmdpdGh1Yi5pby9tZXN0b1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIvLyBDTEFTU1xuZXhwb3J0IGNvbnN0IHNjcm9sbE9mZiA9IFwicm9vdF9zY3JvbGwtZGlzYWJsZWRcIjtcbmV4cG9ydCBjb25zdCBwb3B1cE9wZW5lZCA9IFwicG9wdXBfb3BlbmVkXCI7XG5leHBvcnQgY29uc3QgcGxhY2VMaWtlQWN0aXZlID0gXCJwbGFjZV9fbGlrZS1idG5fYWN0aXZlXCI7XG5leHBvcnQgY29uc3QgaW5wdXRJbnZhbGlkQ2xhc3MgPSBcInBvcHVwX19pbnB1dF9pbnZhbGlkXCI7XG5leHBvcnQgY29uc3QgYWN0aXZlRXJyb3JDbGFzcyA9IFwicG9wdXBfX2lucHV0LWVycm9yX2FjdGl2ZVwiO1xuZXhwb3J0IGNvbnN0IGluYWN0aXZlQnV0dG9uQ2xhc3MgPSBcInBvcHVwX19zYXZlLWJ0bl9pbmFjdGl2ZVwiO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVEZWxldGVCdG4gPSBcInBsYWNlX19kZWwtYnRuX2Rpc2FibGVcIlxuXG4vLyBFTEVNRU5UU1xuZXhwb3J0IGNvbnN0IGJ1dHRvbkVkaXRQcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ0blwiKTtcbmV4cG9ydCBjb25zdCBuYW1lUHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fbmFtZVwiKTtcbmV4cG9ydCBjb25zdCBqb2JQcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19qb2JcIik7XG5leHBvcnQgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faW5wdXRfbmFtZS1wcm9maWxlXCIpO1xuZXhwb3J0IGNvbnN0IGpvYklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faW5wdXRfam9iLXByb2ZpbGVcIik7XG5leHBvcnQgY29uc3QgYnV0dG9uQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hdmF0YXItYnRuXCIpO1xuZXhwb3J0IGNvbnN0IHVzZXJBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2F2YXRhclwiKTtcbmV4cG9ydCBjb25zdCBhdmF0YXJMaW5rSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wb3B1cF9faW5wdXRfYXZhdGFyLWxpbmtcIlxuKTtcbmV4cG9ydCBjb25zdCBidXR0b25BZGRQbGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ0blwiKTtcbmV4cG9ydCBjb25zdCBpbnB1dE5hbWVQbGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLnBvcHVwX19pbnB1dF9uYW1lLXBsYWNlXCJcbik7XG5leHBvcnQgY29uc3QgaW5wdXRMaW5rUGxhY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wb3B1cF9faW5wdXRfbGluay1wbGFjZVwiXG4pO1xuZXhwb3J0IGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2lucHV0XCIpO1xuZXhwb3J0IGNvbnN0IHBvcHVwWm9vbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAtem9vbVwiKTtcbmV4cG9ydCBjb25zdCBlbGVtZW50Rm9ybVByb2ZpbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX2VkaXQtcHJvZmlsZVwiKTtcbmV4cG9ydCBjb25zdCBlbGVtZW50Rm9ybUF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfZWRpdC1hdmF0YXJcIik7XG5cbi8vIFNFTEVDVE9SU1xuZXhwb3J0IGNvbnN0IHJvb3QgPSBcIi5yb290XCI7XG5leHBvcnQgY29uc3QgcGxhY2VzTGlzdCA9IFwiLnBsYWNlc1wiO1xuZXhwb3J0IGNvbnN0IHBsYWNlVGVtcGxhdGUgPSBcIi5wbGFjZS10ZW1wbGF0ZVwiO1xuZXhwb3J0IGNvbnN0IHBsYWNlTGlrZUJ0biA9IFwiLnBsYWNlX19saWtlLWJ0blwiO1xuZXhwb3J0IGNvbnN0IHBsYWNlRGVsQnRuID0gXCIucGxhY2VfX2RlbC1idG5cIjtcbmV4cG9ydCBjb25zdCBwbGFjZUltYWdlID0gXCIucGxhY2VfX2ltYWdlXCI7XG5leHBvcnQgY29uc3QgcGxhY2VUaXRsZSA9IFwiLnBsYWNlX190aXRsZVwiO1xuZXhwb3J0IGNvbnN0IHBsYWNlTGlrZUNvdW50ID0gXCIucGxhY2VfX2xpa2UtY291bnRcIjtcblxuZXhwb3J0IGNvbnN0IHBvcHVwRWxlbWVudCA9IFwiLnBvcHVwXCI7XG5leHBvcnQgY29uc3QgZm9ybVNlbGVjdG9yID0gXCIucG9wdXBfX2NvbnRhaW5lclwiO1xuZXhwb3J0IGNvbnN0IHBvcHVwQ2xvc2VCdG4gPSBcIi5wb3B1cF9fY2xvc2UtYnRuXCI7XG5leHBvcnQgY29uc3QgcG9wdXBab29tSW1nID0gXCIucG9wdXAtem9vbVwiO1xuZXhwb3J0IGNvbnN0IHpvb21JbWFnZSA9IFwiLnBvcHVwLXpvb21fX2ltYWdlXCI7XG5leHBvcnQgY29uc3Qgem9vbUNhcHRpb24gPSBcIi5wb3B1cC16b29tX19jYXB0aW9uXCI7XG5leHBvcnQgY29uc3QgZm9ybVByb2ZpbGUgPSBcIi5wb3B1cF9lZGl0LXByb2ZpbGVcIjtcbmV4cG9ydCBjb25zdCBmb3JtQXZhdGFyID0gXCIucG9wdXBfZWRpdC1hdmF0YXJcIjtcbmV4cG9ydCBjb25zdCBmb3JtUGxhY2UgPSBcIi5wb3B1cF9hZGQtcGxhY2VcIjtcbmV4cG9ydCBjb25zdCBmb3JtQ29uZmlybURlbFBsYWNlID0gXCIucG9wdXBfZGVsLXBsYWNlXCI7XG5cbmV4cG9ydCBjb25zdCBpbnB1dFNlbGVjdG9yID0gXCIucG9wdXBfX2lucHV0XCI7XG5leHBvcnQgY29uc3Qgc3VibWl0QnV0dG9uID0gXCIucG9wdXBfX3NhdmUtYnRuXCI7XG4iLCJpbXBvcnQge1xuICBuYW1lUHJvZmlsZSxcbiAgcGxhY2VMaWtlQnRuLFxuICBwbGFjZUxpa2VDb3VudCxcbiAgcGxhY2VEZWxCdG4sXG4gIHBsYWNlSW1hZ2UsXG4gIHBsYWNlVGl0bGUsXG4gIHBsYWNlTGlrZUFjdGl2ZSxcbiAgZGlzYWJsZURlbGV0ZUJ0bixcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IoXG4gICAgY2FyZCxcbiAgICBzZWxlY3RvcixcbiAgICBoYW5kbGVDYXJkQ2xpY2ssXG4gICAgaGFuZGxlTGlrZUNsaWNrLFxuICAgIGhhbmRsZURlbENsaWNrXG4gICkge1xuICAgIHRoaXMuX25hbWUgPSBjYXJkLm5hbWU7XG4gICAgdGhpcy5fbGluayA9IGNhcmQubGluaztcbiAgICB0aGlzLl9saWtlcyA9IGNhcmQubGlrZXM7XG4gICAgdGhpcy5fY2FyZElkID0gY2FyZC5faWQ7XG4gICAgdGhpcy5fdXNlcklkID0gbmFtZVByb2ZpbGUuaWQ7XG4gICAgdGhpcy5fb3duZXJJZCA9IGNhcmQub3duZXIuX2lkO1xuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xuICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayA9IGhhbmRsZUxpa2VDbGljaztcbiAgICB0aGlzLl9oYW5kbGVEZWxDbGljayA9IGhhbmRsZURlbENsaWNrO1xuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIGNvbnN0IHBsYWNlRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxhY2VcIilcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICByZXR1cm4gcGxhY2VFbGVtZW50O1xuICB9XG5cbiAgX2hhbmRsZUxpa2VkKCkge1xuICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayh0aGlzKTtcbiAgfVxuXG4gIHRvZ2dsZUxpa2UocmVzKSB7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKHBsYWNlTGlrZUFjdGl2ZSk7XG4gICAgdGhpcy5fbGlrZUNvdW50LnRleHRDb250ZW50ID0gcmVzLmxpa2VzLmxlbmd0aDtcbiAgICB0aGlzLl9saWtlcyA9IHJlcy5saWtlcztcbiAgfVxuXG4gIGlzTGlrZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fbGlrZXMuZmluZCgoeyBfaWQgfSkgPT4gX2lkID09PSBuYW1lUHJvZmlsZS5pZCk7XG4gIH1cblxuICBfaGFuZGxlWm9vbUltYWdlKG5hbWUsIGxpbmspIHtcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sobmFtZSwgbGluayk7XG4gIH1cblxuICBfaGFuZGxlRGVsZXRlKGVsZW1lbnQsIGNhcmQpIHtcbiAgICB0aGlzLl9oYW5kbGVEZWxDbGljayhlbGVtZW50LCBjYXJkKTtcbiAgfVxuXG4gIF9zZXRFdmVudHNMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5faGFuZGxlTGlrZWQoKSk7XG4gICAgdGhpcy5fZGVsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NhcmRJZClcbiAgICApO1xuICAgIHRoaXMuX2ltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxuICAgICAgdGhpcy5faGFuZGxlWm9vbUltYWdlKHRoaXMuX25hbWUsIHRoaXMuX2xpbmspXG4gICAgKTtcbiAgfVxuXG4gIGdlbmVyYXRlUGxhY2UoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihwbGFjZUxpa2VCdG4pO1xuICAgIHRoaXMuX2RlbEJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihwbGFjZURlbEJ0bik7XG4gICAgdGhpcy5faW1hZ2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IocGxhY2VJbWFnZSk7XG4gICAgdGhpcy5faW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcbiAgICB0aGlzLl9pbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihwbGFjZVRpdGxlKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fbGlrZUNvdW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKHBsYWNlTGlrZUNvdW50KTtcbiAgICB0aGlzLl9saWtlQ291bnQudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlcy5sZW5ndGg7XG5cbiAgICAvLyBTRVQgREVMRVRFIEJUTiBUTyBNWSBDQVJEXG4gICAgaWYgKHRoaXMuX293bmVySWQgPT09IHRoaXMuX3VzZXJJZCkge1xuICAgICAgdGhpcy5fZGVsQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoZGlzYWJsZURlbGV0ZUJ0bik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RlbEJ1dHRvbi5jbGFzc0xpc3QuYWRkKGRpc2FibGVEZWxldGVCdG4pO1xuICAgIH1cblxuICAgIC8vIFNFVCBBQ1RJVkUgVE8gTVkgTElLRVNcbiAgICBpZiAodGhpcy5pc0xpa2VkKCkpIHtcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChwbGFjZUxpa2VBY3RpdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUocGxhY2VMaWtlQWN0aXZlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRFdmVudHNMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHsgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xuICB9XG5cbiAgcmVuZGVyUGxhY2VzKGNhcmRzQXJyKSB7XG4gICAgY2FyZHNBcnIuZm9yRWFjaCgoY2FyZCkgPT4gdGhpcy5fcmVuZGVyZXIoY2FyZCkpO1xuICB9XG5cbiAgYWRkSXRlbShlbGVtZW50KSB7XG4gICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZChlbGVtZW50KTtcbiAgfVxuXG4gIG5ld0l0ZW0oZWxlbWVudCkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyB1c2VyQXZhdGFyIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKHsgbmFtZVVzZXIsIGFib3V0VXNlciB9KSB7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWVVc2VyO1xuICAgIHRoaXMuX2Fib3V0ID0gYWJvdXRVc2VyO1xuICAgIHRoaXMuX2F2YXRhciA9IHVzZXJBdmF0YXI7XG4gIH1cblxuICBnZXRVc2VySW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCxcbiAgICAgIGFib3V0OiB0aGlzLl9hYm91dC50ZXh0Q29udGVudCxcbiAgICB9OyBcbiAgfVxuXG4gIHNldFVzZXJJbmZvKHJlcykge1xuICAgIHRoaXMuX25hbWUudGV4dENvbnRlbnQgPSByZXMubmFtZTtcbiAgICB0aGlzLl9hYm91dC50ZXh0Q29udGVudCA9IHJlcy5hYm91dDtcbiAgfVxuXG4gIHNldFVzZXJBdmF0YXIocmVzKSB7XG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IHJlcy5hdmF0YXI7XG4gICAgdGhpcy5fYXZhdGFyLmFsdCA9IHJlcy5uYW1lO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICByb290LFxuICBzY3JvbGxPZmYsXG4gIHBvcHVwRWxlbWVudCxcbiAgcG9wdXBPcGVuZWQsXG4gIHBvcHVwQ2xvc2VCdG4sXG4gIHN1Ym1pdEJ1dHRvbixcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iocm9vdCk7XG4gICAgdGhpcy5fcG9wdXBGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9wb3B1cCA9IHRoaXMuX3BvcHVwRm9ybS5jbG9zZXN0KHBvcHVwRWxlbWVudCk7XG4gICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3Ioc3VibWl0QnV0dG9uKTtcbiAgICB0aGlzLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX292ZXJsYXlFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmhhbmRsZUVzY0Nsb3NlID0gdGhpcy5oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKHBvcHVwT3BlbmVkKTtcbiAgICB0aGlzLl9yb290LmNsYXNzTGlzdC5hZGQoc2Nyb2xsT2ZmKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmhhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUocG9wdXBPcGVuZWQpO1xuICAgIHRoaXMuX3Jvb3QuY2xhc3NMaXN0LnJlbW92ZShzY3JvbGxPZmYpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgaGFuZGxlRXNjQ2xvc2UoZSkge1xuICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVPdmVybGF5Q2xvc2UoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fcG9wdXBcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHBvcHVwQ2xvc2VCdG4pXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuY2xvc2UpO1xuXG4gICAgdGhpcy5fb3ZlcmxheUVsZW1lbnQgPSB0aGlzLl9wb3B1cDtcbiAgICB0aGlzLl9vdmVybGF5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJjbGlja1wiLFxuICAgICAgdGhpcy5faGFuZGxlT3ZlcmxheUNsb3NlLmJpbmQodGhpcylcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vcG9wdXAuanNcIjtcbmltcG9ydCB7IHpvb21JbWFnZSwgem9vbUNhcHRpb24gfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fem9vbVBvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fem9vbUltYWdlID0gdGhpcy5fem9vbVBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKHpvb21JbWFnZSk7XG4gICAgdGhpcy5fem9vbUNhcHR1cmUgPSB0aGlzLl96b29tUG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioem9vbUNhcHRpb24pO1xuICB9XG5cbiAgb3BlbihuYW1lLCBsaW5rKSB7XG4gICAgdGhpcy5fem9vbUltYWdlLnNyYyA9IGxpbms7XG4gICAgdGhpcy5fem9vbUltYWdlLmFsdCA9IG5hbWU7XG4gICAgdGhpcy5fem9vbUNhcHR1cmUudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9wb3B1cC5qc1wiO1xuaW1wb3J0IHsgaW5wdXRTZWxlY3RvciwgbmFtZUlucHV0LCBqb2JJbnB1dCB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0IH0pIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgICB0aGlzLl9pbnB1dExpc3QgPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvckFsbChpbnB1dFNlbGVjdG9yKTtcbiAgICB0aGlzLl9uYW1lSW5wdXQgPSBuYW1lSW5wdXQ7XG4gICAgdGhpcy5fam9iSW5wdXQgPSBqb2JJbnB1dDtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICB0aGlzLl9mb3JtVmFsdWVzID0ge307XG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goXG4gICAgICAoaW5wdXQpID0+ICh0aGlzLl9mb3JtVmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWUpXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5fZm9ybVZhbHVlcztcbiAgfVxuXG4gIHNldElucHV0VmFsdWVzKHsgbmFtZSwgYWJvdXQgfSkge1xuICAgIHRoaXMuX25hbWVJbnB1dC52YWx1ZSA9IG5hbWU7XG4gICAgdGhpcy5fam9iSW5wdXQudmFsdWUgPSBhYm91dDtcbiAgfVxuXG4gIGNoYW5nZUJ0blRleHQoKSB7XG4gICAgdGhpcy5fc3VibWl0QnRuLnRleHRDb250ZW50ID0gYNCh0L7RhdGA0LDQvdC10L3QuNC1Li4uYDtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7XG4gICAgdGhpcy5fc3VibWl0QnRuLnRleHRDb250ZW50ID0gYNCh0L7RhdGA0LDQvdC40YLRjGA7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL3BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgfVxuXG4gIGNoYW5nZUNvbmZpcm1IYW5kbGVyKGhhbmRsZXIpIHtcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRZZXMgPSBoYW5kbGVyO1xuICB9XG5cbiAgY2hhbmdlQnRuVGV4dCgpIHtcbiAgICB0aGlzLl9zdWJtaXRCdG4udGV4dENvbnRlbnQgPSBg0KPQtNCw0LvQtdC90LjQtS4uLmA7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IGDQlNCwYDtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxuICAgICAgdGhpcy5faGFuZGxlU3VibWl0WWVzKHRoaXMuX2NhcmRJZClcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBpbnB1dEVsZW1lbnQsXG4gIGlucHV0U2VsZWN0b3IsXG4gIHN1Ym1pdEJ1dHRvbixcbiAgYWN0aXZlRXJyb3JDbGFzcyxcbiAgaW5wdXRJbnZhbGlkQ2xhc3MsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3MsXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKGZvcm1TZWxlY3Rvcikge1xuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IGZvcm1TZWxlY3RvcjtcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybVNlbGVjdG9yKTtcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnQgPSBpbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGlucHV0U2VsZWN0b3I7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gc3VibWl0QnV0dG9uO1xuICAgIHRoaXMuX2FjdGl2ZUVycm9yQ2xhc3MgPSBhY3RpdmVFcnJvckNsYXNzO1xuICAgIHRoaXMuX2lucHV0SW52YWxpZENsYXNzID0gaW5wdXRJbnZhbGlkQ2xhc3M7XG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGluYWN0aXZlQnV0dG9uQ2xhc3M7XG4gICAgdGhpcy5faW5wdXRBcnJheSA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3Rvcik7XG4gICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b24pO1xuICB9XG4gIC8vINCk0YPQvdC60YbQuNGPINC+0LHQvdGD0LvQtdC90LjRjyDQuCDRgdC60YDRi9GC0LjRjyBlcnJvck1lc3NhZ2Ug0L/RgNC4INC+0YLQutGA0YvRgtC40LggcG9wdXBcbiAgcmVzZXRFcnJvclN0YXRlKCkge1xuICAgIHRoaXMuX2lucHV0QXJyYXkuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgICAgdGhpcy5faW5hY3RpdmVCdXR0b24oKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vINCk0YPQvdC60YbQuNGPINC/0L7QutCw0LfQsNGC0Ywg0L7RiNC40LHQutGDINCy0LLQvtC00LBcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxuICAgICk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2FjdGl2ZUVycm9yQ2xhc3MpO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0SW52YWxpZENsYXNzKTtcbiAgfVxuXG4gIC8vINCk0YPQvdC60YbQuNGPINGB0LrRgNGL0YLRjCDQvtGI0LjQsdC60YMg0LLQstC+0LTQsFxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxuICAgICk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9hY3RpdmVFcnJvckNsYXNzKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEludmFsaWRDbGFzcyk7XG4gIH1cblxuICAvLyDQpNGD0L3QutGG0LjRjyDQv9GA0L7QstC10YDQutC4INC40L3Qv9GD0YLQvtCyINC90LAg0L7RiNC40LHQutC4XG4gIF9oYXNJbnZhbGlkSW5wdXQoaW5wdXRMaXN0KSB7XG4gICAgcmV0dXJuIGlucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkO1xuICAgIH0pO1xuICB9XG5cbiAgLy8g0KTRg9C90LrRhtC40Y8g0LjQt9C80LXQvdC10L3QuNGPINC60L3QvtC/0LrQuCDQvtGC0L/RgNCw0LLQutC4XG4gIF9pbmFjdGl2ZUJ1dHRvbigpIHtcbiAgICB0aGlzLl9zdWJtaXRCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB0aGlzLl9zdWJtaXRCdG4uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gIH1cblxuICBfYWN0aXZlQnV0dG9uKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHRoaXMuX3N1Ym1pdEJ0bi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgfVxuXG4gIF90b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QpIHtcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkpIHtcbiAgICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUJ1dHRvbigpO1xuICAgIH1cbiAgfVxuXG4gIC8vINCk0YPQvdC60YbQuNGPINC/0YDQvtCy0LXRgNC60Lgg0LLQstC+0LTQsCDQvdCwINC+0YjQuNCx0LrRg1xuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGlzSW5wdXROb3RWYWxpZCA9ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgaWYgKGlzSW5wdXROb3RWYWxpZCkge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vINCk0YPQvdC60YbQuNGPINGD0YHRgtCw0L3QvtCy0LrQuCDQvtCx0YDQsNCx0L7RgtGH0LjQutC+0LIg0YHQvtCx0YvRgtC40Y9cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGlucHV0TGlzdCA9IEFycmF5LmZyb20oXG4gICAgICB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXG4gICAgKTtcblxuICAgIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCk7XG4gIH1cblxuICAvLyDQpNGD0L3QutGG0LjRjyDQv9GA0L7QstC10YDQutC4INCy0LDQu9C40LTQsNGG0LjQuCDRhNC+0YDQvNGLXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBuYW1lSW5wdXQsXG4gIGpvYklucHV0LFxuICBhdmF0YXJMaW5rSW5wdXQsXG4gIGlucHV0TmFtZVBsYWNlLFxuICBpbnB1dExpbmtQbGFjZSxcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLnVybCA9IGNvbmZpZy51cmw7XG4gICAgdGhpcy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gIH1cblxuICBnZXRQbGFjZXMoKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS9jYXJkc2AsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUHJvbWlzZSk7XG4gIH1cblxuICBuZXdQbGFjZSgpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy51cmx9L2NhcmRzYCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogaW5wdXROYW1lUGxhY2UudmFsdWUsXG4gICAgICAgIGxpbms6IGlucHV0TGlua1BsYWNlLnZhbHVlLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Byb21pc2UpO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUHJvbWlzZSk7XG4gIH1cblxuICBwYXRjaFVzZXJJbmZvKCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogbmFtZUlucHV0LnZhbHVlLFxuICAgICAgICBhYm91dDogam9iSW5wdXQudmFsdWUsXG4gICAgICB9KSxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUHJvbWlzZSk7XG4gIH1cblxuICBwYXRjaFVzZXJBdmF0YXIoKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYXZhdGFyOiBhdmF0YXJMaW5rSW5wdXQudmFsdWUsXG4gICAgICB9KSxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUHJvbWlzZSk7XG4gIH1cblxuICBhZGRMaWtlKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tQcm9taXNlKTtcbiAgfVxuXG4gIHJlbW92ZUxpa2UoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Byb21pc2UpO1xuICB9XG5cbiAgZGVsZXRlQ2FyZChjYXJkSWQpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy51cmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUHJvbWlzZSk7XG4gIH1cblxuICBfY2hlY2tQcm9taXNlKHJlcykge1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBQcm9taXNlLnJlamVjdChgRXJyb3IgJHtyZXMuc3RhdHVzfWApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgfVxufVxuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcblxuaW1wb3J0IHtcbiAgcGxhY2VUZW1wbGF0ZSxcbiAgcGxhY2VzTGlzdCxcbiAgbmFtZVByb2ZpbGUsXG4gIGpvYlByb2ZpbGUsXG4gIHBvcHVwWm9vbUltZyxcbiAgZm9ybVByb2ZpbGUsXG4gIGZvcm1BdmF0YXIsXG4gIGZvcm1QbGFjZSxcbiAgZm9ybUNvbmZpcm1EZWxQbGFjZSxcbiAgYnV0dG9uRWRpdFByb2ZpbGUsXG4gIGJ1dHRvbkFkZFBsYWNlLFxuICBidXR0b25BdmF0YXIsXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvY2FyZC5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvc2VjdGlvbi5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL3VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvcG9wdXBXaXRoSW1hZ2UuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL3BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtIGZyb20gXCIuLi9jb21wb25lbnRzL3BvcHVwV2l0aENvbmZpcm0uanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL2Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvYXBpLmpzXCI7XG5cbmNvbnN0IGNhdGNoRXJyID0gKHJlcykgPT4ge1xuICBhbGVydChg0JLRgdGRINC40LTRkdGCINC90LUg0L/QviDQv9C70LDQvdGDLiAke3Jlcy5zdGF0dXN9YCk7XG59O1xuXG4vLyBQT1BVUFNcbmNvbnN0IHpvb21Qb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShwb3B1cFpvb21JbWcpO1xuem9vbVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IG9wZW5ab29tUG9wdXAgPSAobmFtZSwgbGluaykgPT4ge1xuICB6b29tUG9wdXAub3BlbihuYW1lLCBsaW5rKTtcbn07XG5cbi8vIFZBTElEQVRJT05cbmNvbnN0IGZvcm1Qcm9maWxlVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybVByb2ZpbGUpO1xuZm9ybVByb2ZpbGVWYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5jb25zdCBmb3JtQXZhdGFyVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybUF2YXRhcik7XG5mb3JtQXZhdGFyVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgZm9ybVBsYWNlVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybVBsYWNlKTtcbmZvcm1QbGFjZVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbi8vIEFQSVxuY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gIHVybDogXCJodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTE4XCIsXG4gIGhlYWRlcnM6IHtcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBhdXRob3JpemF0aW9uOiBcIjg3YjI3ZTgyLWNlMTAtNDM5Yy1iYmU2LTJhY2NlOGY3MmNkY1wiLFxuICB9LFxufSk7XG5cbi8vIExJS0VTXG5jb25zdCBoYW5kbGVMaWtlQ2xpY2sgPSAoY2FyZCkgPT4ge1xuICBjb25zdCBjYXJkSWQgPSBjYXJkLl9jYXJkSWQ7XG4gIGlmIChjYXJkLmlzTGlrZWQoKSkge1xuICAgIGFwaVxuICAgICAgLnJlbW92ZUxpa2UoY2FyZElkKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBjYXJkLnRvZ2dsZUxpa2UocmVzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2F0Y2hFcnIpO1xuICB9IGVsc2Uge1xuICAgIGFwaVxuICAgICAgLmFkZExpa2UoY2FyZElkKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBjYXJkLnRvZ2dsZUxpa2UocmVzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2F0Y2hFcnIpO1xuICB9XG59O1xuXG5Qcm9taXNlLmFsbChbYXBpLmdldFVzZXJJbmZvKCksIGFwaS5nZXRQbGFjZXMoKV0pXG4gIC50aGVuKChbdXNlclJlcywgY2FyZFJlc10pID0+IHtcbiAgICB1c2VyUHJvZmlsZS5zZXRVc2VySW5mbyh1c2VyUmVzKTtcbiAgICB1c2VyUHJvZmlsZS5zZXRVc2VyQXZhdGFyKHVzZXJSZXMpO1xuICAgIG5hbWVQcm9maWxlLmlkID0gdXNlclJlcy5faWQ7XG4gICAgY29uc3QgY2FyZHNBcnIgPSBjYXJkUmVzLm1hcCgoeyBuYW1lLCBsaW5rLCBvd25lciwgX2lkLCBsaWtlcyB9KSA9PiAoe1xuICAgICAgbmFtZSxcbiAgICAgIGxpbmssXG4gICAgICBvd25lcixcbiAgICAgIF9pZCxcbiAgICAgIGxpa2VzLFxuICAgIH0pKTtcbiAgICBzZXJ2ZXJQbGFjZUxpc3QucmVuZGVyUGxhY2VzKGNhcmRzQXJyKTtcbiAgfSlcbiAgLmNhdGNoKGNhdGNoRXJyKTtcblxuY29uc3QgY3JlYXRlQ2FyZCA9IChjYXJkKSA9PiB7XG4gIGNvbnN0IG5ld0NhcmQgPSBuZXcgQ2FyZChcbiAgICBjYXJkLFxuICAgIHBsYWNlVGVtcGxhdGUsXG4gICAgb3Blblpvb21Qb3B1cCxcbiAgICBoYW5kbGVMaWtlQ2xpY2ssXG4gICAgaGFuZGxlRGVsQ2xpY2tcbiAgKTtcbiAgY29uc3QgcGxhY2VFbGVtZW50ID0gbmV3Q2FyZC5nZW5lcmF0ZVBsYWNlKCk7XG4gIHNlcnZlclBsYWNlTGlzdC5hZGRJdGVtKHBsYWNlRWxlbWVudCk7XG59O1xuXG5jb25zdCBzZXJ2ZXJQbGFjZUxpc3QgPSBuZXcgU2VjdGlvbihcbiAge1xuICAgIHJlbmRlcmVyOiAoY2FyZCkgPT4ge1xuICAgICAgY3JlYXRlQ2FyZChjYXJkKTtcbiAgICB9LFxuICB9LFxuICBwbGFjZXNMaXN0XG4pO1xuXG4vLyBBREQgTkVXIFBMQUNFXG5jb25zdCBuZXdQbGFjZUZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gIHBvcHVwU2VsZWN0b3I6IGZvcm1QbGFjZSxcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKCkgPT4ge1xuICAgIG5ld1BsYWNlRm9ybS5jaGFuZ2VCdG5UZXh0KCk7XG4gICAgYXBpXG4gICAgICAubmV3UGxhY2UoKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIHBsYWNlVGVtcGxhdGUsXG4gICAgICAgICAgb3Blblpvb21Qb3B1cCxcbiAgICAgICAgICBoYW5kbGVMaWtlQ2xpY2ssXG4gICAgICAgICAgaGFuZGxlRGVsQ2xpY2tcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGxhY2VFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZVBsYWNlKCk7XG4gICAgICAgIHNlcnZlclBsYWNlTGlzdC5uZXdJdGVtKHBsYWNlRWxlbWVudCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBuZXdQbGFjZUZvcm0uY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2F0Y2hFcnIpO1xuICB9LFxufSk7XG5uZXdQbGFjZUZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuYnV0dG9uQWRkUGxhY2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgZm9ybVBsYWNlVmFsaWRhdG9yLnJlc2V0RXJyb3JTdGF0ZSgpO1xuICBuZXdQbGFjZUZvcm0ub3BlbigpO1xufSk7XG5cbi8vIERFTEVURSBQTEFDRVxuY29uc3QgY29uZmlybURlbFBsYWNlID0gbmV3IFBvcHVwV2l0aENvbmZpcm0oZm9ybUNvbmZpcm1EZWxQbGFjZSk7XG5jb25maXJtRGVsUGxhY2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgaGFuZGxlRGVsQ2xpY2sgPSAoZWxlbWVudCwgY2FyZCkgPT4ge1xuICBjb25zdCBwbGFjZUVsZW1lbnQgPSBlbGVtZW50O1xuICBjb25zdCBjYXJkSWQgPSBjYXJkO1xuICBjb25maXJtRGVsUGxhY2Uub3BlbigpO1xuICBjb25maXJtRGVsUGxhY2UuY2hhbmdlQ29uZmlybUhhbmRsZXIoKCkgPT4ge1xuICAgIGNvbmZpcm1EZWxQbGFjZS5jaGFuZ2VCdG5UZXh0KCk7XG4gICAgYXBpXG4gICAgICAuZGVsZXRlQ2FyZChjYXJkSWQpXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBwbGFjZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25maXJtRGVsUGxhY2UuY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2F0Y2hFcnIpO1xuICB9KTtcbn07XG5cbi8vIEVESVQgVVNFUiBJTkZPXG5jb25zdCB1c2VyUHJvZmlsZSA9IG5ldyBVc2VySW5mbyh7XG4gIG5hbWVVc2VyOiBuYW1lUHJvZmlsZSxcbiAgYWJvdXRVc2VyOiBqb2JQcm9maWxlLFxufSk7XG5cbmNvbnN0IGVkaXRQcm9maWxlRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3RvcjogZm9ybVByb2ZpbGUsXG4gIGhhbmRsZUZvcm1TdWJtaXQ6ICgpID0+IHtcbiAgICBlZGl0UHJvZmlsZUZvcm0uY2hhbmdlQnRuVGV4dCgpO1xuICAgIGFwaVxuICAgICAgLnBhdGNoVXNlckluZm8oKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICB1c2VyUHJvZmlsZS5zZXRVc2VySW5mbyhyZXMpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgZWRpdFByb2ZpbGVGb3JtLmNsb3NlKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGNhdGNoRXJyKTtcbiAgfSxcbn0pO1xuZWRpdFByb2ZpbGVGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmJ1dHRvbkVkaXRQcm9maWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGZvcm1Qcm9maWxlVmFsaWRhdG9yLnJlc2V0RXJyb3JTdGF0ZSgpO1xuICBlZGl0UHJvZmlsZUZvcm0uc2V0SW5wdXRWYWx1ZXModXNlclByb2ZpbGUuZ2V0VXNlckluZm8oKSk7XG4gIGVkaXRQcm9maWxlRm9ybS5vcGVuKCk7XG59KTtcblxuLy8gVVBEQVRFIEFWQVRBUlxuY29uc3QgdXBkYXRlQXZhdGFyID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xuICBwb3B1cFNlbGVjdG9yOiBmb3JtQXZhdGFyLFxuICBoYW5kbGVGb3JtU3VibWl0OiAoKSA9PiB7XG4gICAgdXBkYXRlQXZhdGFyLmNoYW5nZUJ0blRleHQoKTtcbiAgICBhcGlcbiAgICAgIC5wYXRjaFVzZXJBdmF0YXIoKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICB1c2VyUHJvZmlsZS5zZXRVc2VyQXZhdGFyKHJlcyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB1cGRhdGVBdmF0YXIuY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2F0Y2hFcnIpO1xuICB9LFxufSk7XG51cGRhdGVBdmF0YXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuYnV0dG9uQXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGZvcm1BdmF0YXJWYWxpZGF0b3IucmVzZXRFcnJvclN0YXRlKCk7XG4gIHVwZGF0ZUF2YXRhci5vcGVuKCk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=